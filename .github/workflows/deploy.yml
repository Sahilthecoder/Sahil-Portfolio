name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write
  security-events: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
concurrency:
  group: 'pages'
  cancel-in-progress: true

# Environment variables
env:
  NODE_ENV: production
  VITE_BASE_URL: '/Sahil-Portfolio/'

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    environment:
      name: github-pages
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'
          check-latest: true
      
      - name: Cache Node.js modules
        uses: actions/cache@v3
        id: cache
        with:
          path: |
            ~/.npm
            node_modules
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-
      
      - name: Clean workspace
        run: |
          echo "Cleaning workspace..."
          rm -rf temp-portfolio
          rm -rf node_modules/.cache
          
      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          npm ci --prefer-offline --no-audit --legacy-peer-deps
          
      - name: Audit dependencies
        run: |
          echo "Running security audit..."
          npm audit --production --audit-level=moderate || true
          
      - name: Verify Environment Variables
        run: |
          echo "=== Environment Variables ==="
          echo "VITE_EMAILJS_SERVICE_ID: ${#VITE_EMAILJS_SERVICE_ID} characters"
          echo "VITE_EMAILJS_TEMPLATE_ID: ${#VITE_EMAILJS_TEMPLATE_ID} characters"
          echo "VITE_EMAILJS_PUBLIC_KEY: ${#VITE_EMAILJS_PUBLIC_KEY} characters"
          echo "VITE_EMAILJS_ADMIN_TEMPLATE_ID: ${#VITE_EMAILJS_ADMIN_TEMPLATE_ID} characters"
          echo "VITE_ADMIN_EMAIL: ${VITE_ADMIN_EMAIL}"
          
          # Verify required variables are not empty
          if [ -z "$VITE_EMAILJS_SERVICE_ID" ]; then
            echo "::error::Missing required secret: VITE_EMAILJS_SERVICE_ID"
            echo "Please add this secret in your repository's Settings > Secrets and variables > Actions"
            exit 1
          fi
          if [ -z "$VITE_EMAILJS_TEMPLATE_ID" ]; then
            echo "::error::Missing required secret: VITE_EMAILJS_TEMPLATE_ID"
            echo "Please add this secret in your repository's Settings > Secrets and variables > Actions"
            exit 1
          fi
          if [ -z "$VITE_EMAILJS_PUBLIC_KEY" ]; then
            echo "::error::Missing required secret: VITE_EMAILJS_PUBLIC_KEY"
            echo "Please add this secret in your repository's Settings > Secrets and variables > Actions"
            exit 1
          fi
        env:
          VITE_EMAILJS_SERVICE_ID: ${{ secrets.VITE_EMAILJS_SERVICE_ID || '' }}
          VITE_EMAILJS_TEMPLATE_ID: ${{ secrets.VITE_EMAILJS_TEMPLATE_ID || '' }}
          VITE_EMAILJS_PUBLIC_KEY: ${{ secrets.VITE_EMAILJS_PUBLIC_KEY || '' }}
          VITE_EMAILJS_ADMIN_TEMPLATE_ID: ${{ secrets.VITE_EMAILJS_ADMIN_TEMPLATE_ID || '' }}
          VITE_ADMIN_EMAIL: ${{ secrets.VITE_ADMIN_EMAIL || '' }}
          
      - name: Check required secrets
        id: check_secrets
        run: |
          if [ -z "${{ secrets.VITE_EMAILJS_SERVICE_ID }}" ] || [ -z "${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}" ] || [ -z "${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}" ]; then
            echo "::error::Missing required secrets. Please ensure all EmailJS secrets are set in repository settings."
            echo "::error::Missing VITE_EMAILJS_SERVICE_ID: $([ -z "${{ secrets.VITE_EMAILJS_SERVICE_ID }}" ] && echo 'true' || echo 'false')"
            echo "::error::Missing VITE_EMAILJS_TEMPLATE_ID: $([ -z "${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}" ] && echo 'true' || echo 'false')"
            echo "::error::Missing VITE_EMAILJS_PUBLIC_KEY: $([ -z "${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}" ] && echo 'true' || echo 'false')"
            exit 1
          fi

      - name: Create .env.production
        if: steps.check_secrets.outcome == 'success'
        run: |
          echo "Creating .env.production file..."
          cat > .env.production << 'EOL'
          VITE_EMAILJS_SERVICE_ID=${{ secrets.VITE_EMAILJS_SERVICE_ID }}
          VITE_EMAILJS_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_TEMPLATE_ID }}
          VITE_EMAILJS_PUBLIC_KEY=${{ secrets.VITE_EMAILJS_PUBLIC_KEY }}
          VITE_EMAILJS_ADMIN_TEMPLATE_ID=${{ secrets.VITE_EMAILJS_ADMIN_TEMPLATE_ID || '' }}
          VITE_ADMIN_EMAIL=${{ secrets.VITE_ADMIN_EMAIL || '' }}
          NODE_ENV=production
          EOL
          
          # Verify the file was created
          if [ ! -f ".env.production" ]; then
            echo "::error::Failed to create .env.production file"
            exit 1
          fi
          
          echo "Environment variables set successfully"
          
          # Verify the file was created (without showing sensitive values)
          echo ".env.production created with the following keys (values hidden for security):"
          cat .env.production | awk -F= '{print $1}' | sort
          
      - name: Build application
        run: |
          echo "Building the application..."
          echo "Vite Environment Mode: $NODE_ENV"
          
          # Verify .env.production exists
          if [ ! -f ".env.production" ]; then
            echo "::error::.env.production file not found!"
            exit 1
          fi
          
          echo "Environment variables (keys only for security):"
          grep -v '^#' .env.production | awk -F= '{print $1}' | sort
          
          # Build with production settings
          echo "Starting build process..."
          npm run build
          
          # Verify build output
          if [ ! -d "dist" ]; then
            echo "::error::Build failed - dist directory not found!"
            exit 1
          fi
          
          echo "Build completed successfully"
          echo "Build output files:"
          find dist -type f | sort
          
          # Check build size
          echo -e "\nChecking build size..."
          BUILD_SIZE=$(du -sh ./dist | cut -f1)
          echo "Build size: $BUILD_SIZE"
          if [ "$(echo $BUILD_SIZE | grep -o '^[0-9]*')" -gt 10 ]; then
            echo "::warning::Build size exceeds 10MB. Consider optimizing assets."
          fi
          
      - name: Verify Installation
        run: |
          echo "Verifying installation..."
          npm list --depth=0
          
      - name: Debug - List files
        run: |
          echo "Current directory structure:"
          ls -la
          echo -e "\nNode version:"
          node -v
          echo -e "\nNPM version:"
          npm -v
          echo -e "\nVite version:"
          npx vite --version
      
      - name: Setup service worker
        run: |
          echo "=== Service Worker Setup ==="
          echo "Current working directory: $(pwd)"
          
          # Ensure public directory exists
          mkdir -p public
          
          # Create a basic service worker if it doesn't exist
          if [ ! -f "public/sw.js" ]; then
            echo "Creating basic service worker at public/sw.js"
            cat > public/sw.js << 'EOL'
            // Basic service worker with offline support
            const CACHE_NAME = 'sahil-portfolio-v1';
            const urlsToCache = [
              '/',
              '/index.html',
              '/assets/index-*.js',
              '/assets/*.css',
              '/images/logo/logo192.png',
              '/images/fallback-image.webp'
            ];

            self.addEventListener('install', event => {
              event.waitUntil(
                caches.open(CACHE_NAME)
                  .then(cache => cache.addAll(urlsToCache))
              );
            });

            self.addEventListener('fetch', event => {
              event.respondWith(
                caches.match(event.request)
                  .then(response => response || fetch(event.request))
              );
            });
            EOL
          fi
          
          # Create service-worker.js symlink
          echo -e "\n=== Setting up service worker symlink ==="
          cd public
          rm -f service-worker.js 2>/dev/null || true
          ln -sf sw.js service-worker.js
          
          # Verify setup
          echo -e "\n=== Service Worker Verification ==="
          ls -la service-worker.js
          cd ..
          
      - name: Final build with production settings
        run: |
          set -e
          echo "=== Starting Production Build ==="
          
          # Clean dist directory
          echo "Preparing dist directory..."
          rm -rf dist
          mkdir -p dist
          
          # Build with production settings
          echo "Building with VITE_BASE_URL=$VITE_BASE_URL"
          npm run build
          
          # Create necessary deployment files
          echo -e "\nCreating deployment files..."
          touch ./dist/.nojekyll
          echo '/* /index.html 200' > ./dist/_redirects
          
          # Generate sitemap (if not already generated)
          if [ ! -f "dist/sitemap.xml" ]; then
            echo "Generating sitemap..."
            echo '<?xml version="1.0" encoding="UTF-8"?>
            <urlset xmlns="http://www.sitemaps.org/schemas/sitemap/0.9">
              <url>
                <loc>https://sahilthecoder.github.io/Sahil-Portfolio/</loc>
                <lastmod>$(date +%Y-%m-%d)</lastmod>
                <changefreq>weekly</changefreq>
                <priority>1.0</priority>
              </url>
            </urlset>' > dist/sitemap.xml
          fi
          
          # Verify build output
          echo -e "\n=== Build Verification ==="
          if [ ! -d "dist" ]; then
            echo "::error::Build failed - dist directory not found!"
            exit 1
          fi
          
          # Check for common issues
          if ! find dist -name "*.html" | grep -q .; then
            echo "::warning::No HTML files found in dist directory"
          fi
          
          echo -e "\nBuild completed successfully"
          echo "Final dist directory contents:"
          ls -la dist/
      
      - name: Setup Pages
        uses: actions/configure-pages@v4
        with:
          static_site_generator: "vite"
      
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: './dist'
          retention-days: 5
    
      - name: Run Lighthouse Audit
        uses: treosh/lighthouse-ci-action@v11
        with:
          uploadArtifacts: true
          temporaryPublicStorage: true
          configPath: .github/lighthouserc.json
        if: always()
    
  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build-and-deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
      
      - name: Verify deployment
        run: |
          echo "Verifying deployment at ${{ steps.deployment.outputs.page_url }}"
          curl -s ${{ steps.deployment.outputs.page_url }} | grep -q "Sahil Ali" && \
            echo "Deployment verified successfully" || \
            (echo "::error::Deployment verification failed" && exit 1)
        
      - name: Post deployment cleanup
        if: always()
        run: |
          echo "Cleaning up..."
          rm -rf node_modules
          rm -f .env.production
    
  # Post-deployment checks
  post-deploy:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Check deployment status
        run: |
          echo "Deployment URL: ${{ needs.deploy.outputs.page_url }}"
          echo "Deployment status: ${{ needs.deploy.result }}"
          
      - name: Notify on success
        if: success()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "🚀 Deployment Successful"
          SLACK_MESSAGE: "New version of Sahil's Portfolio has been deployed to GitHub Pages"
          SLACK_COLOR: "#36a64f"
          
      - name: Notify on failure
        if: failure()
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
          SLACK_TITLE: "❌ Deployment Failed"
          SLACK_MESSAGE: "Failed to deploy Sahil's Portfolio to GitHub Pages"
          SLACK_COLOR: "#ff0000"
